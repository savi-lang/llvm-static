task:
  # Give a long timeout because when we have cache misses, this task is long.
  timeout_in: 120m

  # We need extra CPU and memory to get through this harrowing LLVM build.
  container: &hardware_spec
    cpu: 8
    memory: 8

  environment:
    GITHUB_API_TOKEN: ENCRYPTED[df28a2928d936fa65f97e38a3f2e9fe210f456a3a8ac926896b38eac4b66f8364822593cfd4e69865db5e9fb397472cf]
    CC: clang
    CXX: clang++
    MAKE: make
    NUM_THREADS: 8

  matrix:
    - name: x86_64-unknown-linux-gnu
      container:
        image: ubuntu:20.04
      environment:
        TRIPLE: x86_64-unknown-linux-gnu
        DEPS_INSTALL: "\
          apt-get update && \
          apt-get install -y --no-install-recommends \
            apt-transport-https ca-certificates \
            curl xz-utils clang make cmake python3 zlib1g-dev"
        # Without this next environment var, apt-get will try to ask us
        # interactive questions, to which we will be unable to respond...
        DEBIAN_FRONTEND: noninteractive

    - name: x86_64-unknown-linux-musl
      environment:
        TRIPLE: x86_64-unknown-linux-musl
        DEPS_INSTALL: "\
          apk add --no-cache --update \
            bash curl coreutils alpine-sdk zlib-dev zlib-static \
            gcc g++ clang-dev lld xz make cmake linux-headers python3"
      container:
        image: alpine:3.15
        <<: *hardware_spec

    - name: arm64-unknown-linux-musl
      environment:
        TRIPLE: arm64-unknown-linux-musl
        DEPS_INSTALL: "\
          apk add --no-cache --update \
            bash curl coreutils alpine-sdk zlib-dev zlib-static \
            gcc g++ clang-dev lld xz make cmake linux-headers python3"
      arm_container:
        image: alpine:3.15
        <<: *hardware_spec

    - name: x86_64-unknown-freebsd
      environment:
        TRIPLE: x86_64-unknown-freebsd
        DEPS_INSTALL: "\
          pkg update && pkg install -y \
            cmake gmake git llvm python3"
        # Without this next environment variable, FreeBSD will run a non-GNU
        # version of `make` that doesn't interpret our `Makefile` correctly.
        MAKE: gmake
      freebsd_instance:
        image: freebsd-13-1-release-amd64
        <<: *hardware_spec

    - name: arm64-apple-macosx
      environment:
        TRIPLE: arm64-apple-macosx
        DEPS_INSTALL: " \
          brew update --preinstall && brew install make cmake zlib && brew cleanup && \
          mkdir /tmp/x86_64 && \
          brew fetch --bottle-tag=ventura zlib && \
          tar -xvf `brew --cache --bottle-tag=ventura zlib` -C /tmp/x86_64 --strip-components=2 && \
          lipo -create /tmp/x86_64/lib/libz.a /opt/homebrew/opt/zlib/lib/libz.a -output /tmp/libz.a && \
          echo Done!
          "
        MAKE_EXTRA_ARGS: " \
          ZLIB_LIBRARY=/tmp/libz.a \
          ZLIB_INCLUDE_DIR=/opt/homebrew/opt/zlib/include \
          "
        # Set up the SDKROOT path specific to the present XCode version.
        SDKROOT: /Applications/Xcode-14.2.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
        HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: "1" # optimizes brew install
      macos_instance:
        image: ghcr.io/cirruslabs/macos-ventura-xcode:14.2
      # Caching some homebrew directories helps save some of the otherwise huge
      # amount of time that it takes to update brew from the CI base image.
      brew_cache:
        folder: "$HOME/Library/Caches/Homebrew"
      brew_usr_local_cache:
        folder: "/usr/local/Homebrew"

    # - name: x86_64-unknown-linux-gnu-for-p2
    #   container:
    #     image: ubuntu:20.04
    #   environment:
    #     TRIPLE: x86_64-unknown-linux-gnu
    #     VARIANT: -for-p2
    #     # TODO: Somehow get P2 into upstream LLVM.
    #     MAKE_EXTRA_ARGS: "\
    #       LLVM_DOWNLOAD_URL='https://github.com/savi-lang/p2-llvm-project/archive/refs/tags/test-20201203.tar.gz' \
    #       LLVM_BUILD_ARGS='-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=P2 -DLLVM_TARGETS_TO_BUILD='"
    #     DEPS_INSTALL: "\
    #       apt-get update && \
    #       apt-get install -y --no-install-recommends \
    #         apt-transport-https ca-certificates \
    #         curl xz-utils clang make cmake python3 zlib1g-dev"
    #     # Without this next environment var, apt-get will try to ask us
    #     # interactive questions, to which we will be unable to respond...
    #     DEBIAN_FRONTEND: noninteractive

  os_info_script:
    - uname
    - uname -m
    - uname -a

  deps_script:
    - echo "${DEPS_INSTALL}"
    - sh -c "${DEPS_INSTALL}"

  lib_llvm_cache:
    folder: lib/llvm
    fingerprint_script: ${MAKE} llvm-ci-cache-key && printf -- "${VARIANT}${INDIVIDUAL_CACHE_BUST_DATE}"
    populate_script: sh -c "${MAKE} llvm NUM_THREADS=${NUM_THREADS} PWD=$(pwd) ${MAKE_EXTRA_ARGS}"
  upload_caches: [lib_llvm]

  archive_script:
    - tar -czvf /tmp/llvm.tar.gz -C lib/llvm .

  publish_if_release_script:
    - >-
      sh -c '
        test -z "${CIRRUS_RELEASE}" || \
          curl -v --fail -X POST \
            -H "Authorization: token ${GITHUB_API_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @/tmp/llvm.tar.gz \
            "https://uploads.github.com/repos/$CIRRUS_REPO_FULL_NAME/releases/$CIRRUS_RELEASE/assets?name=${TRIPLE}${VARIANT}-llvm-static.tar.gz" \
      '
